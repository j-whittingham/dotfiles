function fish_prompt
    and set -g _returncode green; or set -g _returncode red
    tty | grep -q tty; and set -g _tty tty; or set -g _tty pts

    function hilight
        set_color $_returncode; echo -n "$argv"; set_color normal
    end

    function glyph
        [ (count $argv) -eq 1 ]; and hilight "$argv"; and return
        [ $_tty = tty ]; and hilight "$argv[1]"; or hilight "$argv[2]"
    end

    function separator
        set_color -o green; echo -n "$argv"; set_color normal
    end

    # manually moving the cursor up 1 row solves the double prompt behaviour..
    # unfortunately, it also overwrites the last line of the command output
    #tput cuu1
    glyph '┌─'; separator '[ '
    set date (date '+%-I:%M.%S %P')
    hilight "$date"

    if [ (acpi -a 2>/dev/null | grep off) ]
        set battery ' Battery'(acpi -b|cut -d',' -f 2)
        set_color -o red; echo -n "$battery"
    end
    separator ' ]'; glyph '──'; separator '[ '

    [ $USER = root ]; and set_color -o red; or set_color -o magenta; echo -n $USER
    hilight '@'

    set hostname (hostname)
    [ -z "$SSH_CLIENT" ]; and set_color -o magenta; or set_color -o red; echo -n "$hostname"
    hilight ':'

    set directory (pwd|sed "s=$HOME=~=")
    set_color white; echo -n "$directory"
    # a really anal kludge to clear fish expansions that can remain on the term prompt line,
    # hence, applying a prompt template to calculate the remaining term line length
    #separator ' ]'; echo
    set margin (solve (tput cols) - (echo "┌─[ $date$battery ]─[ $USER@$hostname:$directory ]" | wc -c))
    separator ' ]'; [ $margin -le 0 ]; and echo; or echo ''(head -c $margin < /dev/zero | tr '\0' ' ')''

    for job in (jobs)
        glyph '│ '
        set_color -o magenta; echo $job
    end

    glyph '└───┤ ' '╰───► '
    set -e _returncode; set -e _tty
end
