#!/usr/bin/zsh

# herbstluftwm
# ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬

# ..................................................... Draw active border color

frequency=0.035

# pulsing blue sequence
colors=( 03252F 053847 074B5F 095D75 0A708E 0C83A6 0E97BE 10A8D4 11BCED 29C3EF 41CAF1 57D0F3 70D7F4 88DEF6 93E0F7 A0E4F8 B6EBFA CFF1FB E7F8FD CFF1FB B6EBFA A0E4F8 93E0F7 88DEF6 70D7F4 57D0F3 41CAF1 29C3EF 11BCED 10A8D4 0E97BE 0C83A6 0A708E 095D75 074B5F 053847 03252F 021216 )

pulsar() {
  while true
  do
    for i in $colors
    do
      herbstclient attr theme.active.color "#$i"
      sleep ${frequency}s
    done
  done
}

draw_border() {
  # highlight stacked windows 
  tag=$(herbstclient attr monitors.focus.tag)
  # kill any previous instance of border highlighting, see autostart
  kill -9 $(pgrep -f 'draw pulsar')

  # visually highlight border for stacked windows
  if [[ $(herbstclient attr tags.$tag.curframe_wcount) -gt 1 ]]; then
    herbstclient layout | grep '\[FOCUS\]'  | grep -q 'max:' && draw pulsar
  else
    herbstclient attr theme.active.color '#93E0F7'
  fi
}

# ....................................................... Draw monitor (regions)

# display coordinates XxY+Z+0 ( primary secondary )
display=( 0x0+0+0 0x0+0+0 )
X=( 0 0 )
Y=( 0 0 )
Z=( 0 0 )

# **zsh** arrays: X, Y, offset coordinates
xyz() {
  monitor=$1
  shift
  display[$monitor]=$(echo $@ | sed 's/.* \([0-9]*x[0-9]*[+][0-9]*[+][0-9]*\) .*/\1/')
  X[$monitor]=$(echo $display[$monitor] | cut -dx -f1)
  Y[$monitor]=$(echo $display[$monitor] | cut -dx -f2 | cut -d+ -f1)
  Z[$monitor]=$(echo $display[$monitor] | cut -d+ -f2 | cut -d+ -f1)
  echo "display=$display  X=$X  Y=$Y  Z=$Z"
}

# dynamic desktop width with conky panel for single/dual monitor setup
draw_monitor() {
  displays=$(xrandr | grep ' connected ')
  echo $displays
  # "primary" designation implies multihead setup
  if echo $displays | grep -q primary; then
    xyz 1 "$(echo $displays | grep primary)"
    xyz 2 "$(echo $displays | grep -v primary)"
  else
    xyz 1 "$(echo $displays)"
  fi

  # margin tweaks for known display resolutions
  case $X[1] in
    2560)   desktop_margin=76 ;;
    1440)   desktop_margin=43 ;;
    *)      desktop_margin=0  ;;
  esac

  # current default monitor setup
  primary=$(herbstclient list_monitors | grep '^0:' | cut -d' ' -f2)
  secondary=$(herbstclient list_monitors | grep '^1:' | cut -d' ' -f2)

  # with transparent compton window borders, calculations assume..
  # - frame_border_width=0
  # - smart_frame_surroundings=0
  # - smart_window_surroundings=0
  conky_width=$(( $(grep 'maximum_width' ~/.conkyrc | awk '{ print $2 }') + $(grep 'border_outer_margin' ~/.conkyrc | awk '{ print $2 }') * 2 ))
  frame_gap=$(grep '^hc set frame_gap' ~/.config/herbstluftwm/conf/theme | awk '{ print $4 }')
  window_gap=$(grep '^hc set window_gap' ~/.config/herbstluftwm/conf/theme | awk '{ print $4 }')
  window_frame=$(( $window_gap + $frame_gap ))
  margin=$(( $desktop_margin - $window_frame ))
  window_margin=$(( $window_frame + $margin ))

  # adjust virtual monitor dimensions to set fixed visual window margins
  case $@ in
    conky)
      primary=$(( $X[1] - $conky_width + $frame_gap - $margin ))x$(( $Y[1] - $margin*2 ))+$(( $Z[1] + $margin ))+$margin
      ;;
    conky*fullscreen)
      primary=$(( $X[1] - $conky_width - $window_gap - $window_margin ))x$(( $Y[1] - $window_margin*2 ))+$(( $Z[1] + $window_margin ))+$window_margin
      ;;
    fullframe)
      primary=$(( $X[1] - $margin*2 ))x$(( $Y[1] - $margin*2 ))+$(( $Z[1] + $margin ))+$margin
      ;;
    fullscreen)
      primary=$display[1]
      ;;
    secondary)
      # create identical secondary monitor margins using dot pitch adjustment
      margin=$(echo $margin | awk '{ print int($1 * 0.25 / 0.282 + 0.5) }')
      # adjust secondary monitor visual margin to primary using dot pitch ratio!
      secondary=$(( $X[2] - $margin*2 ))x$(( $Y[2] - $margin*2 ))+$margin+$margin
      ;;
    secondary*fullscreen)
      secondary=$display[2]
      ;;
  esac
  herbstclient set_monitors $primary $secondary
}

# ....................................................... Redraw desktop padding

# dynamic desktop width with conky panel
conky_monitor() {
  if [[ $(herbstclient attr clients.focus.fullscreen) = true ]]; then
    draw monitor conky fullscreen
  else
    draw monitor conky
  fi
}

draw_refresh() {
  if [[ $(xrandr | grep '*' | cut -dx -f1 | sort | tail -1) -gt 1024 ]]; then
    if xdotool search --onlyvisible --classname 'Conky'; then
      if herbstclient list_monitors | grep '^0:.*\[FOCUS\]'; then
        conky_monitor
      else
        herbstclient chain lock . focus_monitor 0
        conky_monitor
        herbstclient chain . focus_monitor 1 . unlock
      fi
    else
      [[ $(herbstclient attr clients.focus.fullscreen) = true ]] \
        && draw monitor fullscreen \
      || draw monitor fullframe
    fi
  fi
}

# draw
# ▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔

case $1 in
  border)   draw_border ;;
  pulsar)   # killable draw_border background process only
            pulsar &
            ;;
  monitor)  shift
            draw_monitor $@
            ;;
  refresh)  draw_refresh ;;
  *)        echo ".. draw  border | refresh | monitor (conky [fullscreen]|fullframe|fullscreen|secondary [fullscreen])" ;;
esac
