# sdothum - 2016 (c) wtfpl
[ $TRACE ] && CHILD="draw/monitor $@" . $PARENT

# herbstluftwm
# ══════════════════════════════════════════════════════════════════════════════

# ....................................................... Draw monitor (regions)

# Usage: draw monitor conky, conky view
#        draw monitor conky fullscreen, conky fullscreen view
#        draw monitor fullframe, hidden conky view
#        draw monitor fullscreen, fullscreen view
#        draw monitor secondary [fullscreen], secondary monitor view
#        draw monitor menu

SHADOW=${SHADOW:-1}
# load theme
# . ${0%/draw}/config/ENV
case $@ in
secondary*) PANEL_HEIGHT=$(query pheight secondary) ;;
*         ) PANEL_HEIGHT=$(query pheight primary) ;;
esac

# ricing pad left/right margins, 17/12 ~ pythagora's constant, 21/13 ~ golden mean, etc
# RICE=21/13

# ..................................................................... Displays

# if no secondary monitor..
X1=0
Y1=0

xy() { eval X$1=$2; eval Y$1=$3; }

# X Y display dimensions
xy 0 $(query display)
is multihead && xy 1 $(query display secondary)

# XxY+X'+Y' monitor configuration
monitor() { herbstclient list_monitors | grep "^$1:" | cut -d' ' -f2; }

# currently defined monitors
PRIMARY=$(monitor 0)
SECONDARY=$(monitor 1)

# ....................................................................... Layout

# margin tweaks for known display resolutions
desktop_margin=$(margins $X0)
# see toggle monocle
[ -e $MONOCLE ] && monocle=$(cat $MONOCLE) || monocle=0

# with transparent compton window borders, calculations assume..
# - frame_border_width=0
# - smart_frame_surroundings=0
# - smart_window_surroundings=0
# border=$(herbstclient attr theme.border_width)
frame=$(herbstclient attr settings.frame_gap)
window=$(herbstclient attr settings.window_gap)
border=$(herbstclient attr theme.border_width)
window_frame=$(( $window + $frame ))
margin=$(( $desktop_margin - $window_frame ))
[ $margin -lt 0 ] && margin=0
# frame and window gap changes will skew the left margin along the X axis
[ $RICE ] && marginX=$(( $margin * $RICE )) || marginX=$margin
# conkyX=$(( $CONKY_WIDTH + $CONKY_GAP + $CONKY_INNER + $CONKY_OUTER - $window_frame ))
# latest xorg messed alignment option, now using gap X origin offset
conkyX=$(( $CONKY_WIDTH + $CONKY_OUTER + $CONKY_INNER + $CONKY_OUTER - $window_frame ))

# adjust monitor by panel height?
if [ $PANEL_MARGIN ] ;then
  [ -e $PANEL ] && panelY=$PANEL_HEIGHT || panelY=0
else
  panelY=0
fi
[ $margin -lt $PANEL_HEIGHT ] && marginY=$(( $PANEL_HEIGHT - $margin )) || marginY=0

# adjust virtual monitor dimensions to set fixed visual window margins
normal_width=$(( $X0 - $marginX - $conkyX - $monocle*2 ))
fullscreen_width=$(( $normal_width - $window_frame*2 - $border*2))
# panel width global attribute, see draw panel
# echo $fullscreen_width >$FULLSCREEN:width

# ..................................................................... Geometry

PRI() { PRIMARY=$(printf '%dx%d%+d%+d' $1 $2 $3 $4); }
SEC() { SECONDARY=$(printf '%dx%d%+d%+d' $1 $2 $3 $4); }

# monitor regions are adjusted per conky layout.. in this particular instance,
# margin is added to 0x0+X'+0 to tuck right window margin under conky panel area
case $@ in
conky               ) rm -f $FULLSCREEN:primary
                      rm -f $FULLSCREEN:$TAG
                      PRI $(( $normal_width - $SHADOW )) $(( $Y0 - $margin*2 )) $(( $marginX + $monocle )) $margin ;;

conky*fullscreen    ) touch $FULLSCREEN:primary
                      touch $FULLSCREEN:$TAG
                      if [ $X0 -gt $MIN_DISPLAY ] ;then
                        # desktop screens retain margins
                        PRI $(( $fullscreen_width - $SHADOW ))         $(( $Y0 - $margin*2 - $window_frame*2 - $panelY )) \
                            $(( $marginX + $window_frame + $monocle )) $(( $margin + $window_frame ))
                      else
                        # laptop screens fill to edge
                        PRI $(( $fullscreen_width + $marginX + $window_frame )) $Y0 0 0
                      fi ;;

fullframe           ) rm -f $FULLSCREEN:primary
                      rm -f $FULLSCREEN:$TAG
                      if [ $monocle -eq 0 ] ;then
                        PRI $(( $X0 - $marginX*2 )) $(( $Y0 - $margin*2 )) $marginX $margin
                      else
                        PRI $normal_width $(( $Y0 - $margin*2 )) $(( ($X0 - $normal_width)/2 )) $margin
                      fi ;;

fullscreen          ) touch $FULLSCREEN:primary
                      touch $FULLSCREEN:$TAG
                      if [ $monocle -eq 0 ] ;then
                        PRI $X0 $Y0 0 0
                      fi ;;

secondary           ) rm -f $FULLSCREEN:secondary
                      rm -f $FULLSCREEN:$TAG
                      SEC $(( $X1 - $marginX*2 )) $(( $Y1 - $margin*2 + $window_frame - $marginY )) \
                          $(( X0 + $marginX ))    $margin ;;

secondary*fullscreen) touch $FULLSCREEN:secondary
                      touch $FULLSCREEN:$TAG
                      SEC $X1 $Y1 X0 0 ;;

menu                ) if is primary ;then
                      touch $FULLSCREEN:primary
                      PRI $X0 $Y0 0 0
                    else
                      touch $FULLSCREEN:secondary
                      SEC $X1 $Y1 $X0 0
                    fi ;;
esac

# configure multihead..
# virtual monitors defined in lieu of hc pad monitor, to define fullscreen boundaries
# trap negative X pos when no monitor gap»
PRIMARY=$(echo $PRIMARY | sed -r 's/-([0-9]*)/+0/g')
[ $TRACE ] && echo "= herbstclient set_monitors $PRIMARY $SECONDARY" >>$TRACE
herbstclient set_monitors $PRIMARY $SECONDARY &

# ................................................................... Fullscreen

if [ -e $FULLSCREEN:primary ] || [ -e $FULLSCREEN:secondary ] ;then
  touch $FULLSCREEN
else
  rm -f $FULLSCREEN
fi

# vim: set ft=sh: #
