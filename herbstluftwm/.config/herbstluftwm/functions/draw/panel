# sdothum - 2016 (c) wtfpl
[ $TRACE ] && CHILD="draw/panel $@" . $PARENT

# herbstluftwm
# ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂

# ................................................................... Draw panel

# Usage: draw panel <fifo>, see restore panel

which lemonbar >/dev/null 2>&1 || exit
fifo=${1#:}
[ $fifo ] || fifo=$(herbstclient attr monitors.focus.index)
pstat "^lemonbar -d -n lemonbar:$fifo " && exit

# .................................................................. Panel theme

# to set panel location to bottom of screen, export in .xinitrc
[ $PANEL_BOTTOM ] && PANEL_BOTTOM=-b

# panel font
PANEL_FONT='Iosevka'
PANEL_UNDERLINE=2

# tic indicator: none (unset), dot, circle, square, bar, tape, seconds
[ -e $TICKER ] && { TIC=$(cat $TICKER) ; TIC=${TIC:-tape} ;}

# panel symbols, unset candy for numeric desktop tags
CANDY=true
OCCUPIED='■'
FREE='□'
# tag bar separator (visual spacing)
TAG_PAD=' '

# panel theme
# alpha channel for panel transparency with compton
DEFAULT_BG='#00000000'
ACTIVE_BG='#762508'
INACTIVE_BG='#074B5F'
DEFAULT_FG="#$(conky color default_color)"
ACTIVE_FG="#$(conky color PANEL)"
ACTIVE_HIDDEN_FG="#$(conky color colorA)"
INACTIVE_FG="#$(conky color color9)"
INACTIVE_HIDDEN_FG="#$(conky color colorI)"
if [ $CANDY ] ;then
  FREE_FG='#4A4B4E'
  FREE_HIDDEN_FG='#7B7E83'
  OCCUPIED_FG=$FREE_FG
  OCCUPIED_HIDDEN_FG=$FREE_HIDDEN_FG
else
  FREE_FG='#7B7E83'
  HIDDEN_FG='#25C0EF'
  OCCUPIED_FG='#E4E5E6'
fi

PANEL_HEIGHT=$(query pheight)

# ..................................................................... Geometry

# calculate panel width (don't span monitors)
monitor=$(herbstclient attr monitors.focus.index)

# geometry has the format: X Y W H
geometry='X:Y:W:H'
for i in $(herbstclient monitor_rect $monitor) ;do
  eval monitor${geometry%%:*}=$i
  geometry=${geometry#*:}
done

frame=$(herbstclient attr settings.frame_gap)
window=$(herbstclient attr settings.window_gap)
border=$(herbstclient attr theme.border_width)
# dynamically indent the panel by margin minus panel height
indent=$(( $frame + $window + $border - $PANEL_HEIGHT ))
[ $indent -lt $PANEL_HEIGHT ] && indent=$(( $PANEL_HEIGHT * 3 / 2 ))
panel_width=$(( $monitorW - $frame * 2 - $indent * 2 ))

# compositing shadow tweaking probably only works for flat looks, consider a panel height factor otherwise
displayH=$(xrandr 2>/dev/null | grep '\*' |
    sed -r "s/.*x([0-9]*).*/\1/ ; $(( $(herbstclient attr monitors.focus.index) + 1 ))q ; d")
if [ $(( $displayH - $monitorH )) -gt $PANEL_HEIGHT ] ;then
  panel_offsetY=$(( ($displayH - $monitorH - $PANEL_HEIGHT) / 2 ))
  [ $PANEL_BOTTOM ] && panel_offsetY=$(( $monitorH + $panel_offsetY ))
else
  [ $PANEL_BOTTOM ] && panel_offsetY=$(( $displayH - $PANEL_HEIGHT )) || panel_offsetY=$PANEL_HEIGHT
fi

# deprecated with primary:secondary as left:right..
# multihead geometry for secondary primary (left right) orientation
panel_offsetX=$(( $monitorX + $frame + $indent - 1 ))
# if is multihead ;then
#   if is primary ;then
#     secondaryX=$(query display secondary | awk '{ print $1 }')
#     panel_offsetX=$(( $panel_offsetX - $secondaryX ))
#   fi
# fi

# ................................................................... Tag status

# eye candy tag icons
tag_symbol() { [ $visible ] && tag=$OCCUPIED || tag=$FREE ;}

desktops() {
  active=$(query tag)
  inactive=$(query tag inactive)
  unset tags
  for i in $(query winids) ;do tags="$tags $(herbstclient attr clients.$i.tag)" ;done
  unset desktops
  for i in $TAGS ;do
    if echo $tags | grep -q $i ;then
      echo $tags | egrep -q "^$i| $i" && visible=true || unset visible
      echo $tags | grep -q "'$i" && hidden=true || unset hidden
      [ $CANDY ] && tag_symbol || tag=$i
      if [ $i = "$active" ] ;then
        if [ $CANDY ] ;then
          format="%{B$DEFAULT_BG}"
          [ $visible ] && format="${format}%{F$ACTIVE_FG}"
          [ $hidden ]  && format="${format}%{F$ACTIVE_HIDDEN_FG}"
        else
          format="%{B$ACTIVE_BG}"
          [ $visible ] && format="${format}%{F$OCCUPIED_FG}" || format="${format}%{F$FREE_FG}"
          [ $hidden ]  && format="${format}${TAG_PAD}%{U$HIDDEN_FG}%{+u}"
        fi
      elif [ $i = "$inactive" ] ;then
        if [ $CANDY ] ;then
          format="%{B$DEFAULT_BG}"
          [ $visible ] && format="${format}%{F$INACTIVE_FG}"
          [ $hidden ]  && format="${format}%{F$INACTIVE_HIDDEN_FG}"
        else
          format="%{B$INACTIVE_BG}"
          [ $visible ] && format="${format}%{F$OCCUPIED_FG}" || format="${format}%{F$FREE_FG}"
          [ $hidden ]  && format="${format}${TAG_PAD}%{U$HIDDEN_FG}%{+u}"
        fi
      elif [ $CANDY ] ;then
        format="%{B$DEFAULT_BG}"
        [ $visible ] && format="${format}%{F$OCCUPIED_FG}"
        [ $hidden ]  && format="${format}%{F$OCCUPIED_HIDDEN_FG}"
      else
        format="%{B$DEFAULT_BG}"
        [ $visible ] && format="${format}%{F$OCCUPIED_FG}" || format="${format}%{F$FREE_FG}"
        [ $hidden ]  && format="${format}${TAG_PAD}%{U$HIDDEN_FG}%{+u}"
      fi
    else
      unset visible
      unset hidden
      [ $CANDY ] && tag=$FREE || tag=$i
      if [ $i = "$active" ] ;then
        [ $CANDY ] && format="%{B$DEFAULT_BG}%{F$ACTIVE_FG}" || format="%{F$FREE_FG}%{B$ACTIVE_BG}"
      elif [ $i = "$inactive" ] ;then
        [ $CANDY ] && format="%{B$DEFAULT_BG}%{F$INACTIVE_FG}" || format="%{F$FREE_FG}%{B$INACTIVE_BG}"
      else
        [ $CANDY ] && format="%{B$DEFAULT_BG}%{F$FREE_FG}" || format="%{F$FREE_FG}%{B$DEFAULT_BG}"
      fi
    fi
    [ $hidden ] && [ -z $CANDY ] && unset leader || leader="${TAG_PAD}"
    desktops="${desktops} ${format}${leader}${tag}%{-u}${TAG_PAD}%{U-}%{B-}%{F-}"
  done
}

# ............................................................... Current window

# tag desktop description
title() {
  tag=$(herbstclient attr monitors.focus.tag)
  title=$(query tname $tag)
}

# desktop details
working_on() {
  title
  count=$(herbstclient attr tags.focus.client_count)
  tickcount=$(herbstclient attr "tags.by-name.'$tag.client_count" 2>/dev/null)
  [ $tickcount ] || tickcount=0
  if [ $count -gt 1 ] || [ $tickcount -gt 0 ] ;then
    if [ $count -gt 1 ] && [ $tickcount -gt 0 ] ;then
      title="$title${LSEP}$count${LSEP}%{U$DEFAULT_FG}%{+u}$tickcount%{-u}%{U-}"
    elif [ $count -gt 1 ] ;then
      title="$title${LSEP}$count"
    else
      title="$title${LSEP}%{U$DEFAULT_FG}%{+u}$tickcount%{-u}%{U-}"
    fi
  fi
  unset hiding
  if is fullscreen ;then
    [ $count -gt 1 ] && hiding=true
  elif herbstclient compare tags.by-name.$tag.curframe_wcount gt 1 ;then
    is layout max && hiding=true
  fi
  if [ $count -gt 0 ] ;then
    if [ "$(query wname)" = "${line#?}" ] ;then
      if [ $hiding ] ;then
        title="$title${LSEP}%{B$DEFAULT_BG}%{F$ACTIVE_FG}%{U$ACTIVE_FG}%{+u}${line#?}%{-u}%{U-}%{F-}%{B-}%{F$DEFAULT_FG}"
      else
        title="$title${LSEP}%{B$DEFAULT_BG}%{F$ACTIVE_FG}${line#?}%{F-}%{B-}%{F$DEFAULT_FG}"
      fi
    else
      if [ $hiding ] ;then
        title="$title${LSEP}%{B$DEFAULT_BG}%{F$ACTIVE_FG}%{U$ACTIVE_FG}%{+u}$(query wname)%{-u}%{U-}%{F$DEFAULT_FG}"
      else
        title="$title${LSEP}%{B$DEFAULT_BG}%{F$ACTIVE_FG}$(query wname)%{F$DEFAULT_FG}"
      fi
      desc=$(asciititle ${line#?})
      [ "$desc" ] && title="$title${LSEP}${desc}%{B-}%{F-}"
    fi
  fi
}

# ........................................................... Current conditions

# clocks
dot() { [ "$tic" = '●' ] && tic='○' || tic='●' ;}

circle() {
  [ "$tic" = '◓' ] && tic='◑' ||
  { [ "$tic" = '◑' ] && tic='◒' ||
    { [ "$tic" = '◒' ] && tic='◐' || tic='◓' ;};}
}

square() {
  [ "$tic" = '⬒' ] && tic='⬔' ||
  { [ "$tic" = '⬔' ] && tic='◨' ||
    { [ "$tic" = '◨' ] && tic='◪' ||
      { [ "$tic" = '◪' ] && tic='⬓' ||
        { [ "$tic" = '⬓' ] && tic='⬕' ||
          { [ "$tic" = '⬕' ] && tic='◧' ||
            { [ "$tic" = '◧' ] && tic='◩' || tic='⬒' ;};};};};};}
}

bar() {
  tic=${line#*|}
  tic=${tic%|*}
  case $tic in
  00      ) tic=' ' ;;
  0[2468] ) tic="%{F$DEFAULT_FG}▁%{F-}" ;;
  0[13579]) tic="%{F$DEFAULT_FG}▂%{F-}" ;;
  10      ) tic="%{F$DEFAULT_FG}▁%{F-}" ;;
  1[2468] ) tic="%{F$DEFAULT_FG}▂%{F-}" ;;
  1[13579]) tic="%{F$DEFAULT_FG}▃%{F-}" ;;
  20      ) tic="%{F$DEFAULT_FG}▂%{F-}" ;;
  2[2468] ) tic="%{F$DEFAULT_FG}▃%{F-}" ;;
  2[13579]) tic="%{F$DEFAULT_FG}▄%{F-}" ;;
  30      ) tic="%{F$DEFAULT_FG}▃%{F-}" ;;
  3[2468] ) tic="%{F$DEFAULT_FG}▄%{F-}" ;;
  3[13579]) tic="%{F$DEFAULT_FG}▅%{F-}" ;;
  40      ) tic="%{F$DEFAULT_FG}▄%{F-}" ;;
  4[2468] ) tic="%{F$DEFAULT_FG}▅%{F-}" ;;
  4[13579]) tic="%{F$DEFAULT_FG}▆%{F-}" ;;
  50      ) tic="%{F$DEFAULT_FG}│%{F-}" ;;
  51      ) tic="%{F$DEFAULT_FG}┃%{F-}" ;;
  52      ) tic="%{F$DEFAULT_FG}█%{F-}" ;;
  53      ) tic="%{F$DEFAULT_FG}▇%{F-}" ;;
  54      ) tic="%{F$DEFAULT_FG}▆%{F-}" ;;
  55      ) tic="%{F$DEFAULT_FG}▅%{F-}" ;;
  56      ) tic="%{F$DEFAULT_FG}▄%{F-}" ;;
  57      ) tic="%{F$DEFAULT_FG}▃%{F-}" ;;
  58      ) tic="%{F$DEFAULT_FG}▂%{F-}" ;;
  59      ) tic="%{F$DEFAULT_FG}▁%{F-}" ;;
  esac
}

seconds() { tic=${line#*| } ; tic=${tic%|*} ;}

tape() {
  tic=${line#*|}
  tic=${tic%|*}
  if [ ${tic%%:*} -lt 10 ] ;then
    # hours 0 - 9, cycle aligns on ten second intervals
    len=11
    pos=${tic##*:}
    # pos=$(( ${pos%??} % 10 )) # crashes in dash (memory leak on arm?)
    pos=$(echo "${pos%??} % 10" | bc)
    [ $pos = 0 ] && pos=10
  else
    # hours 10 - 12, format string continously cycles
    len=12
    pos=$(( ${pos:-0} + 1 ))
    [ $pos -gt 10 ] && pos=0
  fi
  tic="$(echo "$tic" | tail -c $(( $len - $pos )))$(echo "$tic" | head -c $pos)"
}

weather() {
  conky weather panel >$WEATHER &
  unset update_weather
}

# weather watch
current_conditions() {
  unset clock
  if [ $TIC ] ;then
    case $TIC in
    b* ) bar ;;
    c* ) circle ;;
    d* ) dot ;;
    sq*) square ;;
    s* ) seconds ;;
    t* ) tape ;;
    esac
    ticker="%{F$DEFAULT_FG}$tic%{F-}"
    case $TIC in
    se*) clock="$ticker" ;;
    t* ) clock="$ticker" ;;
    *  ) clock="  $ticker" ;;
    esac
  fi

  # refresh every 10 minutes
  if [ -e $WEATHER ] ;then
    minute=${line#*:?}
    case ${minute%%\%*} in
    0) [ $update_weather ] && weather ;;
    *) update_weather=true ;;
    esac
  fi
  line="${line%%^*}$(cat $WEATHER)${line#*^}"

  line="${line%%|*}$clock%{F-}${line##*|}"
  system="%{F$DEFAULT_FG}%{B$DEFAULT_BG}${line#?}%{B-}%{F-}"
}

# initialize
[ -e $WEATHER ] && weather

# fifo read loop
panel() {
  while read -r line ;do
    case $line in
    S*       ) current_conditions ;;
    T*       ) working_on ;;
    *_changed) desktops ;;
    esac

    # empty desktop does not generate T message
    [ "$title"    ] || title
    [ "$desktops" ] || desktops
    printf "%s\n" "%{l}${title}%{c}${desktops} %{r}${system}"
    unset line
  done
}

# .............................................................. FIFO processing

# initialize fifo
[ -e $PANEL_FIFO:$fifo ] && rm -f $PANEL_FIFO:$fifo
mkfifo $PANEL_FIFO:$fifo
# note physical linebreaks for each format specification (to accomodate slow processors, notably arm)
case $TIC in
se*) clock -i 1 -sf "S^${RSEP}%{F$ACTIVE_FG}| %-I:%M %S%P|%{F-}${RSEP}%a %-d %b '%y" >$PANEL_FIFO:$fifo & ;;
t* ) clock -i 1 -sf "S^${RSEP}%{F$ACTIVE_FG}| %-I:%M:%S%P|%{F-}${RSEP}%a %-d %b '%y" >$PANEL_FIFO:$fifo & ;;
*  ) clock -i 1 -sf "S^${RSEP}%{F$ACTIVE_FG}%-I:%M%{F-} %P|%S|${RSEP}%a %-d %b '%y"  >$PANEL_FIFO:$fifo & ;;
esac
herbstclient --idle '.*_changed' >$PANEL_FIFO:$fifo &
# see emit_hook
xtitle -sf 'T%s\n' >$PANEL_FIFO:$fifo 2>/dev/null &

cat $PANEL_FIFO:$fifo |
    panel |
    lemonbar -d -n "lemonbar:$fifo" \
             -g ${panel_width}x$PANEL_HEIGHT+$panel_offsetX+$panel_offsetY \
             -u $PANEL_UNDERLINE \
             -f "$PANEL_FONT:size=$(fontsize)" -F "$DEFAULT_FG" -B "$DEFAULT_BG" &
wait &

# vim: set ft=sh: #
