#!/bin/sh
# archlinux install with openbox

# after booting from usb...
#		"Boot Arch Linux"
# colemak kbd layout!
km

# load device mapper module
modprobe dm-mod
dhcpcd

# to partition a new disk
#-------------------------
# need wired connection to install grub2 in order to use boot partition within lvm
pacman -Syy
pacman -S gptfdisk
# if the lvm is being created in this step creating a "gpt" disk (vs mbr) you must create
#			32mb "EF02" bios boot partition
#			"8E00" linux lvm partition
gdisk /dev/sda
# the following assumes we have created a 2 partition gpt disk as noted above 
#pvcreate /dev/sda1
pvcreate /dev/sda2
# might use a better vg name than vg1...
#vgcreate vg1 /dev/sda1
vgcreate vg1 /dev/sda2
vgdisplay
# create logical volumes
lvcreate -C y -L 4G	-n swap vg1
lvcreate -L 200M		-n boot vg1
lvcreate -L 1G			-n root vg1
lvcreate -L 20G			-n home vg1
lvcreate -L 500M		-n local vg1
lvcreate -L 1G 			-n opt vg1
lvcreate -L 500M		-n srv vg1
lvcreate -L 200M		-n tmp vg1
lvcreate -L 6G			-n usr vg1
lvcreate -L 4G			-n var vg1
# lots of space left on the ssd to grow filesystems
lvscan
mkswap /dev/vg1/swap 
mkfs.ext2 /dev/vg1/boot 
mkfs.ext4 /dev/vg1/root 
mkfs.ext4 /dev/vg1/home 
mkfs.ext4 /dev/vg1/local 
mkfs.ext4 /dev/vg1/opt
mkfs.ext4 /dev/vg1/srv 
mkfs.ext4 /dev/vg1/tmp 
mkfs.ext4 /dev/vg1/usr 
mkfs.ext4 /dev/vg1/var 

# for an existing lvm
#---------------------
# if you're curious
pvscan
vgscan
# mount existing lvm
vgchange -ay
lvscan

# basic archlinux install setup
#-------------------------------
# DO NOT partition the drives as you have activated the lv's
# - instead, skip to "Manually configure block devices..."
# - select base packages AND
#			"netcfg"
#			"sudo"
#			"wireless_tools"
# - edit /etc/rc.conf:
#			KEYMAP="colemak"
#			USELVM="yes"
#			HOSTNAME="luna" or "monad"
#			interface=eth0 or wlan0
# - edit /etc/mkinitcpio:
#			HOOKS="... sata lvm2 filesystems ..."
/arch/setup

# preparing grub2 install
#-------------------------
ls /mnt
df -h
mount -o bind /dev /mnt/dev
mount -t proc /proc /mnt/proc
mount -t sysfs /sys /mnt/sys
chroot /mnt /bin/bash
# connection lost for chroot session (but fails on hostname not found)

# initialize wireless, wlan0 should be up, if not raise it :-)
#ifcfg wlan0 up
#iwlist wlan0 scan
# comment out the active network examples in the example conf file
cp /etc/wpa_supplicant.conf /etc/wpa_supplicant.my.conf
echo "
network={
	ssid=\"Ravens\"
	scan_ssid=1
	proto=WPA RSN
	key_mgmt=WPA-PSK
	pairwise=CCMP TKIP
	group=CCMP TKIP
$(wpa_passphrase "Ravens" "the keys of enoch" | grep psk)
}" >>/etc/wpa_supplicant.my.conf

iwconfig wlan0 essid "Ravens"
wpa_supplicant -B -Dwext -iwlan0 -c/etc/wpa_supplicant.my.conf
dhcpcd wlan0
# test connectivity
#ping www.google.com
pacman-db-upgrade
pacman -Syy
pacman -S grub2-bios
grub_bios-install --boot-directory=/boot --no-floppy --recheck --debug /dev/sda
grub-mkconfig -o /boot/grub/grub.cfg
exit
umount /mnt 

reboot

# update base install
pacman -Syu

# user groups
useradd -m -G users,audio,video,wheel,storage,optical,power,network,log,lp -s /bin/bash shum
passwd shum

# sound
pacman -S alsa-firmware alsa-utils alsa-oss
# detect snd card
alsaconf
# run alsamixer as normal user to adjust vol (m to unmute)
su - shum -c alsamixer
# save settings by going back root
alsactl store
# edit /etc/rc.conf to add dbus & alsa: DAEMONS=(dbus ... @alsa)

# X11
# determine your video chipset type: lspci | grep VGA
pacman -S xorg-server xorg-xinit xorg-utils xorg-server-utils
lspci | grep VGA | grep ATI && pacman -S xf86-video-ati
lspci | grep VGA | grep Intel && pacman -S xf86-video-intel
# type nvidia-xconfig (if you have a nvidia card), else
Xorg -configure
cp /root/xorg.conf.new /etc/X11/xorg.conf
# note: xorg.conf is optional so if you do not use it, grab arandr to change resolution
# or you can use a proprietary utility such as nvidia-utils for nvidia cards

# openbox
pacman -S openbox obconf obmenu lxappearance consolekit
# once openbox is installed, move menu.xml & rc.xml to ~/.config/openbox/ in your home directory...
su - shum
$ mkdir -p ~/.config/openbox/
$ cp /etc/xdg/openbox/rc.xml ~/.config/openbox
$ cp /etc/xdg/openbox/menu.xml ~/.config/openbox
# edit your ~/.xinitrc and add the following...
$ echo "exec ck-launch-session dbus-launch openbox-session" >>~/.xinitrc

reboot

# network
pacman -S networkmanager network-manager-applet polkit-gnome gnome-keyring libgnome-keyring pyxdg

# system
pacman -S launchy

# utilities
pacman -S ranger vifm
