#!/bin/sh
# fresh arch pre-installer

function heading() {
  message=">>>   $@   <<<"
  echo
  echo $(head -c $(echo "$message" | wc -L) < /dev/zero | tr '\0' '-')
  echo "$message"
  echo $(head -c $(echo "$message" | wc -L) < /dev/zero | tr '\0' '-')
  echo
}

function checkpoint() {
  echo
  while true
  do
    read -p "continue? [yes]/no/shell :"
    reply=${REPLY,,}
    if [[ $reply = n ]]; then
      exit
    elif [[ $reply = s ]]; then
      bash -i
    elif [[ -z $reply || $reply = y ]]; then
      return
    fi
  done
  echo
}

function original() {
  [[ -f $@.original ]] || sudo cp -v $@ $@.original
}

function connect() {
  if [[ $(cat /sys/class/net/enp1s0/openstate 2>/dev/null) = up ]]; then
    heading 'connecting enp1s0'
    dhcpcd eth0
  else
    wlan0=$(iw dev | grep Interface | sed 's/.*Interface //')
    heading "connecting $wlan0"
    ip link set $wlan0
    wifi-menu $wlan0
  fi
}

echo 'assuming usb (scripts) mounted on /media..'
echo '> loadkeys colemak'
echo '> mkdir /media'
echo '> mount /dev/sd<usb>1 /media'


heading 'connect interface'
# ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
if ! ping -c1 www.archlinux.org >/dev/null 2>&1; then
  connect
  ping -c1 www.archlinux.org
  checkpoint
fi


heading 'boot disk'
# ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
ls -l /dev/disk/by-id | grep -v part | grep ata
read -p "Boot disk /dev/sd? [a-z]: " disk
[[ -z $disk ]] && echo "invalid disk reference.. aborting" && exit
echo
read -p 'Partition and format disk as btrfs? [y|N]: ' format
[[ -z $format ]] && format=N
if [[ $format = y ]]; then
  # already mounted?
  # mount | grep -q /dev/sd${disk}1 && umount -v /dev/sd${disk}1
  echo
  read -p 'Stripe volume (raid0)? [y|N]: ' stripe
  [[ "$stripe" = N ]] && stripe=
  if [[ -n $stripe ]]; then
    echo
    read -p "Add stripe volume /dev/sd? [a-z]: " stripe
    [[ -z $stripe || "$stripe" = $disk ]] && echo "invalid stripe reference.. aborting" && exit
  fi
  echo
  echo "Create DOS partition.."
  echo "Create (optional) swap type 82.."
  echo "Toggle as bootable disk.."
  fdisk /dev/sd${disk}
  fdisk -l /dev/sd${disk}
  checkpoint
  if [[ -n $stripe ]]; then
    echo
    echo "Partition stripe disk.."
    fdisk /dev/sd${stripe}
    fdisk -l /dev/sd${stripe}
    checkpoint
  fi

  heading 'format btrfs disk partition'
  # remove --nodiscard for trim supporting ssd's
  fdisk -l /dev/sd${disk} | grep -q swap && partition=2 || partition=1
  if [[ $partition = 2 ]]; then
    mkswap -L Swap /dev/sd${disk}1
    swapon -L Swap
  fi
  if [[ -z $stripe ]]; then
    mkfs.btrfs -f -L Archlinux /dev/sd${disk}${partition}
  else
    mkfs.btrfs -f -L Archlinux -d raid0 /dev/sd${disk}${partition} /dev/sd${stripe}
  fi
  checkpoint
fi
fdisk -l /dev/sd${disk} | grep -q swap && partition=2 || partition=1


heading 'mount partition'
# ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
[[ -d /mnt ]] || mkdir -v /mnt
mkdir -v /mnt/btrfs-root
read -p "Use SSD discard mount option? [y|N]: " discard
[[ -z $discard || $discard = N ]] && discard= || discard=",discard"
mount=defaults,noatime,ssd,autodefrag,space_cache${discard}
echo "mount -v -o ${mount} /dev/sd${disk}${partition} /mnt/btrfs-root"
mount -v -o ${mount} /dev/sd${disk}${partition} /mnt/btrfs-root
checkpoint


heading 'RESCUE'
# ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
read -p "RESCUE (mount btrfs subvolumes) [Y|n]: " rescue
[[ -z $rescue ]] && rescue=Y


if [[ $rescue = n ]]; then
heading 'create btrfs subvolumes'
# ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
mkdir -pv /mnt/btrfs-root/__snapshot
mkdir -pv /mnt/btrfs-root/__current
read -p "Create separate /net filesystem? [y|N]: " data
[[ -z $data ]] && data=N
if [[ $format = y ]]; then
  btrfs subvolume create /mnt/btrfs-root/__current/ROOT
  [[ $data = y ]] && btrfs subvolume create /mnt/btrfs-root/__current/net
  # btrfs subvolume create /mnt/btrfs-root/__current/downloads
  btrfs subvolume create /mnt/btrfs-root/__current/home
  btrfs subvolume create /mnt/btrfs-root/__current/opt
  btrfs subvolume create /mnt/btrfs-root/__current/srv
  # btrfs subvolume create /mnt/btrfs-root/__current/nix
  # btrfs subvolume create /mnt/btrfs-root/__current/tmp
  # btrfs subvolume create /mnt/btrfs-root/__current/usr
  # btrfs subvolume create /mnt/btrfs-root/__current/usr/local
  btrfs subvolume create /mnt/btrfs-root/__current/var
  btrfs subvolume create /mnt/btrfs-root/__snapshot/.snapshots
else
  # heading 'rebuild root, nix, tmp, var'
  heading 'rebuild root, var'
  btrfs subvolume delete /mnt/btrfs-root/__current/ROOT
  # btrfs subvolume delete /mnt/btrfs-root/__current/nix
  # btrfs subvolume delete /mnt/btrfs-root/__current/tmp
  # btrfs subvolume delete /mnt/btrfs-root/__current/usr
  btrfs subvolume delete /mnt/btrfs-root/__current/var
  btrfs subvolume delete /mnt/btrfs-root/__snapshot/.snapshots
  btrfs subvolume create /mnt/btrfs-root/__current/ROOT
  # btrfs subvolume create /mnt/btrfs-root/__current/nix
  # btrfs subvolume create /mnt/btrfs-root/__current/tmp
  # btrfs subvolume create /mnt/btrfs-root/__current/usr
  btrfs subvolume create /mnt/btrfs-root/__current/var
  btrfs subvolume create /mnt/btrfs-root/__snapshot/.snapshots
fi
fi
btrfs subvolume list -p /mnt/btrfs-root/
checkpoint


heading 'mount subvolumes'
# ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
mkdir -pv /mnt/btrfs-boot
mount -v -o ${mount},nodev,subvol=__current/ROOT /dev/sd${disk}${partition} /mnt/btrfs-boot
[[ $data = y ]] && mkdir -pv /mnt/btrfs-boot/net
# mkdir -pv /mnt/btrfs-boot/net/downloads
mkdir -pv /mnt/btrfs-boot/home
mkdir -pv /mnt/btrfs-boot/opt
mkdir -pv /mnt/btrfs-boot/srv
# mkdir -pv /mnt/btrfs-boot/nix
# mkdir -pv /mnt/btrfs-boot/tmp
# mkdir -pv /mnt/btrfs-boot/usr/local
mkdir -pv /mnt/btrfs-boot/var/lib
mkdir -pv /mnt/btrfs-boot/.snapshots
[[ $data = y ]] && mount -v -o ${mount},nodev,subvol=__current/net /dev/sd${disk}${partition} /mnt/btrfs-boot/net
# mount -v -o ${mount},nodev,subvol=__current/downloads /dev/sd${disk}${partition} /mnt/btrfs-boot/net/downloads
mount -v -o ${mount},nodev,subvol=__current/home /dev/sd${disk}${partition} /mnt/btrfs-boot/home
mount -v -o ${mount},nodev,subvol=__current/opt /dev/sd${disk}${partition} /mnt/btrfs-boot/opt
mount -v -o ${mount},nodev,subvol=__current/srv /dev/sd${disk}${partition} /mnt/btrfs-boot/srv
# mount -v -o ${mount},nodev,subvol=__current/nix /dev/sd${disk}${partition} /mnt/btrfs-boot/nix
# mount -v -o ${mount},nodev,subvol=__current/tmp /dev/sd${disk}${partition} /mnt/btrfs-boot/tmp
# mount -v -o ${mount},nodev,subvol=__current/usr /dev/sd${disk}${partition} /mnt/btrfs-boot/usr
# mount -v -o ${mount},nodev,subvol=__current/usr/local /dev/sd${disk}${partition} /mnt/btrfs-boot/usr/local
mount -v -o ${mount},nodev,noexec,subvol=__current/var /dev/sd${disk}${partition} /mnt/btrfs-boot/var
mount -v -o ${mount},nodev,noexec,subvol=__snapshot/.snapshots /dev/sd${disk}${partition} /mnt/btrfs-boot/.snapshots
# bind pacman /var/lib data to ROOT for system snapshots
mkdir -pv /mnt/btrfs-boot/var/lib
# mkdir -pv /mnt/btrfs-root/__current/ROOT/var/lib
# echo mount --bind /mnt/btrfs-root/__current/ROOT/var/lib /mnt/btrfs-boot/var/lib
mount -v --bind /mnt/btrfs-root/__current/ROOT/var/lib /mnt/btrfs-boot/var/lib
checkpoint


if [[ $rescue = n ]]; then
heading 'choose repo mirrors'
# ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
original /etc/pacman.d/mirrorlist
sudo sed -i -e '/^Server =/s/^/#/' -e '/Canada/,+1s/^#S/S/' /etc/pacman.d/mirrorlist
grep '^Server' /etc/pacman.d/mirrorlist
checkpoint


heading 'installing archlinux base and btrfs hook!'
# ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
pacstrap /mnt/btrfs-boot base btrfs-progs
checkpoint


heading 'edit fstab'
# ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
# genfstab -L -p /mnt/btrfs-boot | \
#   sed -e "/\/var\/lib/s/,subvol=[^ \t]*//" \
#       -e '/\/var\/lib/s/rw,/rw,nodev,nosuid,noexec,/' \
#       -e 's,/var/lib,/run/btrfs-root,' >> /mnt/btrfs-boot/etc/fstab
# sed -i "\$a/run/btrfs-root/__current/ROOT/var/lib\t\t/var/lib\t\tnone\t\tbind\t\t0 0" /mnt/btrfs-boot/etc/fstab
genfstab -L -p /mnt/btrfs-boot >> /mnt/btrfs-boot/etc/fstab
nano /mnt/btrfs-boot/etc/fstab
checkpoint
fi


heading 'chroot mount /dev/sd..1 usb (scripts) and run "archlinux-1boot" to complete base installation'
# ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
# arch-chroot /mnt/btrfs-boot
# pass the newly partitioned disk device letter to grub!
arch-chroot /mnt/btrfs-boot /usr/bin/env disk=$disk hostname=$hostname /usr/bin/bash -i


heading 'umounting btrfs'
# ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
umount -v /mnt/btrfs-boot/.snapshots
umount -v /mnt/btrfs-boot/var/lib
umount -v /mnt/btrfs-boot/var
# umount -v /mnt/btrfs-boot/usr/local
# umount -v /mnt/btrfs-boot/usr
# umount -v /mnt/btrfs-boot/tmp
# umount -v /mnt/btrfs-boot/nix
umount -v /mnt/btrfs-boot/srv
umount -v /mnt/btrfs-boot/opt
umount -v /mnt/btrfs-boot/home
# umount -v /mnt/btrfs-boot/downloads
[[ $data = y ]] && umount -v /mnt/btrfs-boot/net
umount -v /mnt/btrfs-boot
umount -v /mnt/btrfs-root


heading 'cd / and umount /media (usb) and reboot'
# ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
