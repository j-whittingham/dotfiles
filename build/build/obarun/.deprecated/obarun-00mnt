#!/bin/sh
# sdothum - 2016 (c) wtfpl

# fresh obarun pre-installer

[ $USER == root ] || { echo '> run as root' ; exit ;}
source ./obarun-functions

echo 'assuming usb (scripts) mounted on /media..'
echo '> mkdir /media'
echo '> mount /dev/sd<usb>1 /media'


heading 'connect interface'
# ══════════════════════════════════════════════════════════════════════════════
if ! ping -c1 www.google.com >/dev/null 2>&1 ;then
  connect
  ping -c1 www.google.ca
  checkpoint
fi


heading 'boot disk'
# ══════════════════════════════════════════════════════════════════════════════
ls -l /dev/disk/by-id | grep -v part | grep ata
read -p "Boot disk /dev/sd? [a-z] | /dev/mmcblk? [0]: " disk
if [ -z $disk ] ;then
  echo 'invalid (empty) disk reference.. aborting'
  exit
fi
[ $disk = 0 ] && device=/dev/mmcblk${disk} || device=/dev/sd${disk}
echo
read -p 'Partition and format disk as ext4? [y|N]: ' format
[ $format ] || format=N
diskutil=fdisk
if [ "$format" = y ] ;then
  # already mounted?
  # mount | grep -q /dev/sd${disk}1 && umount -v /dev/sd${disk}1
  # use fdisk for mbr (bios) install, else gdisk for gpt (UEFI) install
  echo
  echo '> EFI 512M (grub)'
  echo '> boot 128M (syslinux)'
  echo '> swap 1-4G (or =RAM for hibernation)'
  echo
  read -p 'GPT or MBR partition? [G|m]: ' diskutil
  [ $diskutil ] && diskutil=fdisk || diskutil=cfdisk
  echo
  read -p 'Stripe volume (raid0)? [y|N]: ' stripe
  [ "$stripe" = n ] && stripe=
  if [ "$stripe" = y ] ;then
    echo
    read -p "Add stripe volume /dev/sd? [a-z]: " stripe
    if [ -z $stripe ] || [ "$stripe" = $disk ] ;then
      echo 'invalid stripe reference.. aborting'
      exit
    fi
  fi
  echo
  case $diskutil in
    fdisk ) echo 'Create active boot mbr partition..' ;;
    cfdisk) echo 'Create gpt partitions -> [ EFI boot ] swap root' ;;
  esac
  checkpoint
  $diskutil $device
  echo
  case $diskutil in
    fdisk ) echo 'Name mbr partitions..' ;;
    cfdisk) echo 'Name gpt partitions -> [ EFI boot ] swap root' ;;
  esac
  checkpoint
  cgdisk $device
  fdisk -l $device
  checkpoint
  if [ ! -z $stripe ] ;then
    echo
    echo 'Partition stripe disk..'
    checkpoint
    $diskutil /dev/sd${stripe}
    fdisk -l /dev/sd${stripe}
    checkpoint
  fi

  # reread partition tables
  hdparm -z $device
  cat /proc/partitions
  checkpoint
fi

efi=$(partition EFI)
boot=$(partition boot)
swap=$(partition swap)
root=$(partition root)

if [ "$format" = y ] ;then
  heading 'format btrfs disk partition'
  [ $efi ] && { mkfs.fat -n EFI -F32 $efi; echo EFI; } || [ $boot ] && { mkfs.ext2 -L Boot $boot; echo BOOT; }
  checkpoint

  if [ $swap ] ;then
    mkswap -L Swap $swap
    swapon -L Swap
    echo
  fi

  if [ -z $stripe ] ;then
    mkfs.ext4 -L Obarun $root
  else
    mkfs.ext4 -L Obarun -d raid0 $root /dev/sd${stripe}
  fi
  checkpoint
fi

heading 'mount partitions'
# ══════════════════════════════════════════════════════════════════════════════
read -p "SSD boot drive? [Y|n]: " ssd
[ -z $ssd ] || [ "$ssd" = Y ] && ssd=,discard || unset ssd
mount=defaults,noatime,${ssd}
echo "mount -v -o ${mount} $root /mnt"
mount -v -o ${mount} $root /mnt
checkpoint


heading 'mount efi/boot partitions'
# ══════════════════════════════════════════════════════════════════════════════
if [ $boot ] ;then
  mkdir -pv /mnt/boot
  mount -v $boot /mnt/boot
  echo BOOT partition
elif [ $efi ] ;then
  mkdir -pv /mnt/boot/efi
  mount -v $efi /mnt/boot/efi
  echo EFI partition
fi

# vim: set ft=sh: #
