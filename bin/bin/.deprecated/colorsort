#!/usr/bin/python2
# -*- coding: utf-8 -*-

# herbstluftwm
# ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬

# ....................................................... Sort rgb border colors

# Usage: colors | sed 's/^#//' | colorsort

from __future__ import division
import sys
import colorsys
import struct

def rgb_to_hls(r, g, b):
    h, l, s = colorsys.rgb_to_hls(r/255, g/255, b/255)
    return (int(round(h * 360)), int(round(l * 100)), int(round(s * 100)))

def hls_to_rgb(h, l, s):
    r, g, b = colorsys.hls_to_rgb(h/360, l/100, s/100)
    return (int(round(r * 255)), int(round(g * 255)), int(round(b * 255)))

def hls(hex):
    rgb=struct.unpack('BBB',hex.decode('hex'))
    # hls = colorsys.rgb_to_hls(*rgb)
    hls = rgb_to_hls(rgb[0], rgb[1], rgb[2])
    return hls

def rgb(hls):
    # rgb = colorsys.hls_to_rgb(*hls)
    rgb = hls_to_rgb(hls[0], hls[1], hls[2])
    hex = struct.pack('BBB', *rgb).encode('hex')
    print hex
    return

if __name__ == '__main__':
    colors=[]
    while 1:
        hex=sys.stdin.readline()[:-1]
        if not hex:
            break
        color = hls(hex)
        if color:
            colors.append(color)

    colors.sort(key = lambda t: (t[1], t[0], t[2]))
    # colors.sort(key = lambda t: (t[1], t[2], t[0]))
    for hls in colors:
        rgb(hls)

    # colors.sort(key = lambda t: (t[1], t[0], t[2]), reverse = True)
    # # colors.sort(key = lambda t: (t[1], t[2], t[0]), reverse = True)
    # for hls in colors:
    #     rgb(hls)
