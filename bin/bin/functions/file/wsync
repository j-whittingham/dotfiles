#!/usr/bin/dash
# sdothum - 2016 (c) wtfpl

# File
# ══════════════════════════════════════════════════════════════════════════════

# ................................................................ watchman sync

# Usage: wsync [-a | -s | -v | [<path>]*]

CACHEDIR=${CACHEDIR:-$HOME/.cache}
SESSION=${SESSION:-$HOME/.session}
WATCH=$CACHEDIR/wsync
IGNORE=$WATCH:ignore
WSYNC=${WSYNC:-$SESSION/wsync}
VERBOSE=$WSYNC:verbose
LOG=/tmp/wsync.log

# watchman
ROOT=$STOW
CMD=wsync
NAME=$CMD
SCAN=5

# arm hosts
ARM=pi

[ -e $WATCH ] || touch $WATCH
# server is always online but satellite arm device may be offline (and sync on boot)
cpu arm || { ping -c 1 -W 1 pi >/dev/null 2>&1 || exit; }
cpu arm && target=$SERVER: || target=$ARM:

info() {
  name=$(echo $file | exclude | sed "s|$STOW/||")
  if [ -n "$name" ] ;then
    trace "$1 ${target}stow ${__YELLOW}$name" >>$LOG
    notify X "$1 ${target}stow" "$name"
  fi
}

register() {
  if [ -f "$file" ] ;then
    ([ -e $VERBOSE ] || [ ! -e $WSYNC ]) && info Register
    grep -qx "${file%/*}" $WATCH || echo ${file%/*} >>$WATCH
  fi
  unset file
}

queue () {
  for i in $@ ;do
    [ -d "$ROOT/${i%/*}" ] && { register; file="$ROOT/$i"; } || file="$file $i"
  done
  register
}

archive() {
  while read file <&3 ;do
    info Sync
    to="${target}${file%/*}/"
    echo rsync -d "$file" "$to" >>$LOG
    /usr/bin/rsync -avz --update -d --delete "$file" "$to" >>$LOG 2>&1
  done 3< $WATCH
  >$WATCH
}

watch() {
  if pstat watchman ;then
    cat $WATCH
  else
    # trap random watchman initialization flooding and reset watch queue
    notify X low 'Watchman' "$(watchman -- trigger $ROOT $NAME -- $CMD | sed '/[{}]/d; s/^ *//g; s/"//g; s/,$//')"
    touch $IGNORE
    trap "rm -f $IGNORE" EXIT
    scan=true
    while [ $scan ] ;do
      unset scan
      for i in $(seq 1 $SCAN) ;do
        sleep 1; pkill -f 'wsync .*/.*' && scan=true
      done
      # adjust for initialization latency
      [ $scan ] || { [ -s $WATCH ] || scan=true; }
    done
    notify X 3 critical 'Watchman' "Triggers cleared: $(cat $WATCH | wc -l)"
    >$WATCH
  fi
}

case $1 in
'') cpu arm && pstat syncthing && systemd stop syncthing@$USER; watch & ;;
-a) archive & ;;
-s) archive && (watchman shutdown-server; pstat syncthing || systemd start syncthing@$USER &) ;;
-v) pstat syncthing || watch & ;;
* ) queue $@ && [ -e $WSYNC ] && archive & ;;
esac

# vim: set ft=sh: #
