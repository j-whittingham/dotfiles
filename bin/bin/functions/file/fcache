#!/usr/bin/dash
# sdothum - 2016 (c) wtfpl

# Shell
# ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂

# ................................................................... Find cache

usage() {
  echo "usage: $(basename $0) [type] <dir>"
  echo "usage: $(basename $0) - <dir>, force directory cache update"
  echo "usage: $(basename $0) + <dir>, directory cache creation only"
  exit 1
}

# Note: non-directory caches automatically update their associated directory caches via stest
#       but directory caches (used in fuzzy jumping) require manual updating, as required,
#       to avoid triggering unnecessary file scans (directory trees being restructured far
#       less frequently than regular file creation/deletion)

CACHEDIR=${CACHEDIR:-$HOME/.cache}
# zero caches from interrupted builds can cause hangs, ignore pacaur/pkg permission denials 
find $CACHEDIR -name 'fcache:*' -size 0c -exec rm {} \; 2>/dev/null

# speed up fuzzy searches (especially arm), see shell/j j.fish
case $1 in
[bcdflps]) type=$1 ; shift ;;
'-'      ) type=d ; refresh=true ; shift ;;
'+'      ) type=d ; create=true ; shift ;;
*        ) [ $# -eq 1 ] && type=d || usage ;;
esac

cname() { echo $1 | tr '/' ':' ;}

cache=$CACHEDIR/fcache:$type$(cname $1)
dcache=$CACHEDIR/fcache:d$(cname $1)

# if unchanged files in non-directory search, return cache
# note: always returns directory cache
if [ -e $cache ] && [ -e $dcache ] && [ -z $refresh ] ;then
  [ $type != d ] && stest -dqr -n $dcache $(cat $dcache) || { [ $create ] && exit || exec cat $cache ;}
fi

# [ $refresh ] && notify "$1" 'Refreshing fcache'
# following links can be problematic for concurrent finds (locking issue)
[ -L $1 ] && link='-L'
pgrep -f "find .*$1 -type d" >/dev/null || nohup find $link $1 -type d 2>/dev/null | exclude >$dcache &
pgrep -f "find .*$1 -type $type" >/dev/null || nohup find $link $1 -type $type 2>/dev/null | exclude >$cache &
[ $refresh ] || [ $create ] || nohup find $link $1 -type $type 2>/dev/null | exclude &

# vim: set ft=sh: #
